//●
//数字iを文字列cに変換する時は一桁ごとにcharで一文字ずつ'0'を足して変換し、最後にstringで足し合わせる感じ
//一つの桁に対して、char c1 ='0'+i  その後、s=c1+c2+c3+...

//to_string()で中の引数をstring型にできる
//int number = 100;
//string s = to_string(number);

//●
//逆に文字列からint型にするのはstoi 関数を使う
//doubleへの変換はstodでできる
//long long への変換はstollでできる?
//int main(){
  string s = "100";
  int n = stoi(s);
  cout <<n <<endl;
}

//●
//10進法の数字の一つ一つの要素の和の考え方
//これは10進法の一つ一つの要素の取り出し方に使える
/*
例えば 834 の各桁の和は 8 + 3 + 4 = 15 ですが、このような処理をプログラムする方法を考えなければなりません。これには以下のような定石があります:

834 を 10 で割った余りは 4　-> 答えに加算
834 を 10 で割って 83
83 を 10 で割った余りは 3 -> 答えに加算
83 を 10 で割って 8
8 を 10 で割った余りは 8 -> 答えに加算
8 を 10 で割って 0
0 なので break
これをプログラムにする
*/
//下のnは桁数
int findSumOfDigits(int n) {
  int sum = 0;
  while (n > 0) { // n が 0 になるまで
    sum += n % 10;
    n /= 10;
  }
  return sum;
}


//●
//偶奇の判定（bitの考え利用して）
//もしaが偶数なら ->if(a&1==0)
//bitは最後の一桁で偶奇が判別できるから

//●
//数列の一部分ずつ切り取るときは累積和を使う
//累積和とは各要素までの和をとって、適宜引いたりするやつ
//これは数列の順番が保たれないといけないときに

//●
//小数点が出力されているような問題はprintf("%.10f\n",a)を使って出力するとよい

//●
//char型とstring型でイコールをとることはできない
/*
#include <bits/stdc++.h>
using namespace std;

int main() {
  string str = "a";
  char c = 'a';
  bool b = str == c; // できない
}
*/
//char型を集めてstring型を作ることは可能


//●
//vectorでループを回すとき、foreach文が使える
//このとき、ループの書き方で：が使われているのに注意

/*
//vector <int> vec{3,4,5};
//for (auto i: a){
  処理
}
*/

//●
//複数の要素を持つものをある一つの要素を使ってsortする時には複数のvectorを使ってもいいが次のvectorの中にtapleを突っ込むのもあり？
//やり方、ラムダ式を立てるか、比較関数を立てる
//https://minus9d.hatenablog.com/entry/2014/07/05/215756

//stringの文字列を別々に区切って新しい文字列を生成する
//string s ;
//char x1 = s[1];
//みたいな感じで取っていく
//文字列のなかで特定の文字列を検索はs.substr(i,3)でsのi文字目から後ろ3つの文字列を取得する方法でできる
